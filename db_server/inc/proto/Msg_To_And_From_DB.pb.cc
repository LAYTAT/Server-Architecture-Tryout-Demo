// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Msg_To_And_From_DB.proto

#include "Msg_To_And_From_DB.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class DbReq_User_AuthDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DbReq_User_Auth>
      _instance;
} _DbReq_User_Auth_default_instance_;
class DbRep_User_AuthDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DbRep_User_Auth>
      _instance;
} _DbRep_User_Auth_default_instance_;
namespace protobuf_Msg_5fTo_5fAnd_5fFrom_5fDB_2eproto {
void InitDefaultsDbReq_User_AuthImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_DbReq_User_Auth_default_instance_;
    new (ptr) ::DbReq_User_Auth();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DbReq_User_Auth::InitAsDefaultInstance();
}

void InitDefaultsDbReq_User_Auth() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDbReq_User_AuthImpl);
}

void InitDefaultsDbRep_User_AuthImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_DbRep_User_Auth_default_instance_;
    new (ptr) ::DbRep_User_Auth();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DbRep_User_Auth::InitAsDefaultInstance();
}

void InitDefaultsDbRep_User_Auth() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDbRep_User_AuthImpl);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DbReq_User_Auth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DbReq_User_Auth, hashedusrid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DbReq_User_Auth, hashedusrpwd_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DbRep_User_Auth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DbRep_User_Auth, isuserverified_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::DbRep_User_Auth, errcode_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::DbReq_User_Auth)},
  { 7, -1, sizeof(::DbRep_User_Auth)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_DbReq_User_Auth_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_DbRep_User_Auth_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Msg_To_And_From_DB.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030Msg_To_And_From_DB.proto\"<\n\017DbReq_User"
      "_Auth\022\023\n\013hashedUsrId\030\001 \001(\005\022\024\n\014hashedUsrP"
      "wd\030\002 \001(\005\":\n\017DbRep_User_Auth\022\026\n\016isUserVer"
      "ified\030\001 \001(\010\022\017\n\007errCode\030\002 \001(\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 156);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Msg_To_And_From_DB.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Msg_5fTo_5fAnd_5fFrom_5fDB_2eproto

// ===================================================================

void DbReq_User_Auth::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DbReq_User_Auth::kHashedUsrIdFieldNumber;
const int DbReq_User_Auth::kHashedUsrPwdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DbReq_User_Auth::DbReq_User_Auth()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Msg_5fTo_5fAnd_5fFrom_5fDB_2eproto::InitDefaultsDbReq_User_Auth();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DbReq_User_Auth)
}
DbReq_User_Auth::DbReq_User_Auth(const DbReq_User_Auth& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hashedusrid_, &from.hashedusrid_,
    static_cast<size_t>(reinterpret_cast<char*>(&hashedusrpwd_) -
    reinterpret_cast<char*>(&hashedusrid_)) + sizeof(hashedusrpwd_));
  // @@protoc_insertion_point(copy_constructor:DbReq_User_Auth)
}

void DbReq_User_Auth::SharedCtor() {
  ::memset(&hashedusrid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hashedusrpwd_) -
      reinterpret_cast<char*>(&hashedusrid_)) + sizeof(hashedusrpwd_));
  _cached_size_ = 0;
}

DbReq_User_Auth::~DbReq_User_Auth() {
  // @@protoc_insertion_point(destructor:DbReq_User_Auth)
  SharedDtor();
}

void DbReq_User_Auth::SharedDtor() {
}

void DbReq_User_Auth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DbReq_User_Auth::descriptor() {
  ::protobuf_Msg_5fTo_5fAnd_5fFrom_5fDB_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Msg_5fTo_5fAnd_5fFrom_5fDB_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DbReq_User_Auth& DbReq_User_Auth::default_instance() {
  ::protobuf_Msg_5fTo_5fAnd_5fFrom_5fDB_2eproto::InitDefaultsDbReq_User_Auth();
  return *internal_default_instance();
}

DbReq_User_Auth* DbReq_User_Auth::New(::google::protobuf::Arena* arena) const {
  DbReq_User_Auth* n = new DbReq_User_Auth;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DbReq_User_Auth::Clear() {
// @@protoc_insertion_point(message_clear_start:DbReq_User_Auth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hashedusrid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hashedusrpwd_) -
      reinterpret_cast<char*>(&hashedusrid_)) + sizeof(hashedusrpwd_));
  _internal_metadata_.Clear();
}

bool DbReq_User_Auth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DbReq_User_Auth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 hashedUsrId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hashedusrid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hashedUsrPwd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hashedusrpwd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DbReq_User_Auth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DbReq_User_Auth)
  return false;
#undef DO_
}

void DbReq_User_Auth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DbReq_User_Auth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 hashedUsrId = 1;
  if (this->hashedusrid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hashedusrid(), output);
  }

  // int32 hashedUsrPwd = 2;
  if (this->hashedusrpwd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hashedusrpwd(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DbReq_User_Auth)
}

::google::protobuf::uint8* DbReq_User_Auth::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DbReq_User_Auth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 hashedUsrId = 1;
  if (this->hashedusrid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hashedusrid(), target);
  }

  // int32 hashedUsrPwd = 2;
  if (this->hashedusrpwd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hashedusrpwd(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DbReq_User_Auth)
  return target;
}

size_t DbReq_User_Auth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DbReq_User_Auth)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 hashedUsrId = 1;
  if (this->hashedusrid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hashedusrid());
  }

  // int32 hashedUsrPwd = 2;
  if (this->hashedusrpwd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hashedusrpwd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbReq_User_Auth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DbReq_User_Auth)
  GOOGLE_DCHECK_NE(&from, this);
  const DbReq_User_Auth* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DbReq_User_Auth>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DbReq_User_Auth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DbReq_User_Auth)
    MergeFrom(*source);
  }
}

void DbReq_User_Auth::MergeFrom(const DbReq_User_Auth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DbReq_User_Auth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hashedusrid() != 0) {
    set_hashedusrid(from.hashedusrid());
  }
  if (from.hashedusrpwd() != 0) {
    set_hashedusrpwd(from.hashedusrpwd());
  }
}

void DbReq_User_Auth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DbReq_User_Auth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbReq_User_Auth::CopyFrom(const DbReq_User_Auth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DbReq_User_Auth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbReq_User_Auth::IsInitialized() const {
  return true;
}

void DbReq_User_Auth::Swap(DbReq_User_Auth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DbReq_User_Auth::InternalSwap(DbReq_User_Auth* other) {
  using std::swap;
  swap(hashedusrid_, other->hashedusrid_);
  swap(hashedusrpwd_, other->hashedusrpwd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DbReq_User_Auth::GetMetadata() const {
  protobuf_Msg_5fTo_5fAnd_5fFrom_5fDB_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Msg_5fTo_5fAnd_5fFrom_5fDB_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DbRep_User_Auth::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DbRep_User_Auth::kIsUserVerifiedFieldNumber;
const int DbRep_User_Auth::kErrCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DbRep_User_Auth::DbRep_User_Auth()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Msg_5fTo_5fAnd_5fFrom_5fDB_2eproto::InitDefaultsDbRep_User_Auth();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DbRep_User_Auth)
}
DbRep_User_Auth::DbRep_User_Auth(const DbRep_User_Auth& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&isuserverified_, &from.isuserverified_,
    static_cast<size_t>(reinterpret_cast<char*>(&errcode_) -
    reinterpret_cast<char*>(&isuserverified_)) + sizeof(errcode_));
  // @@protoc_insertion_point(copy_constructor:DbRep_User_Auth)
}

void DbRep_User_Auth::SharedCtor() {
  ::memset(&isuserverified_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errcode_) -
      reinterpret_cast<char*>(&isuserverified_)) + sizeof(errcode_));
  _cached_size_ = 0;
}

DbRep_User_Auth::~DbRep_User_Auth() {
  // @@protoc_insertion_point(destructor:DbRep_User_Auth)
  SharedDtor();
}

void DbRep_User_Auth::SharedDtor() {
}

void DbRep_User_Auth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DbRep_User_Auth::descriptor() {
  ::protobuf_Msg_5fTo_5fAnd_5fFrom_5fDB_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Msg_5fTo_5fAnd_5fFrom_5fDB_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DbRep_User_Auth& DbRep_User_Auth::default_instance() {
  ::protobuf_Msg_5fTo_5fAnd_5fFrom_5fDB_2eproto::InitDefaultsDbRep_User_Auth();
  return *internal_default_instance();
}

DbRep_User_Auth* DbRep_User_Auth::New(::google::protobuf::Arena* arena) const {
  DbRep_User_Auth* n = new DbRep_User_Auth;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DbRep_User_Auth::Clear() {
// @@protoc_insertion_point(message_clear_start:DbRep_User_Auth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&isuserverified_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errcode_) -
      reinterpret_cast<char*>(&isuserverified_)) + sizeof(errcode_));
  _internal_metadata_.Clear();
}

bool DbRep_User_Auth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DbRep_User_Auth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool isUserVerified = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isuserverified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 errCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DbRep_User_Auth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DbRep_User_Auth)
  return false;
#undef DO_
}

void DbRep_User_Auth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DbRep_User_Auth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isUserVerified = 1;
  if (this->isuserverified() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isuserverified(), output);
  }

  // int32 errCode = 2;
  if (this->errcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->errcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:DbRep_User_Auth)
}

::google::protobuf::uint8* DbRep_User_Auth::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DbRep_User_Auth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isUserVerified = 1;
  if (this->isuserverified() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isuserverified(), target);
  }

  // int32 errCode = 2;
  if (this->errcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->errcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DbRep_User_Auth)
  return target;
}

size_t DbRep_User_Auth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DbRep_User_Auth)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool isUserVerified = 1;
  if (this->isuserverified() != 0) {
    total_size += 1 + 1;
  }

  // int32 errCode = 2;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbRep_User_Auth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DbRep_User_Auth)
  GOOGLE_DCHECK_NE(&from, this);
  const DbRep_User_Auth* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DbRep_User_Auth>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DbRep_User_Auth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DbRep_User_Auth)
    MergeFrom(*source);
  }
}

void DbRep_User_Auth::MergeFrom(const DbRep_User_Auth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DbRep_User_Auth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.isuserverified() != 0) {
    set_isuserverified(from.isuserverified());
  }
  if (from.errcode() != 0) {
    set_errcode(from.errcode());
  }
}

void DbRep_User_Auth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DbRep_User_Auth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbRep_User_Auth::CopyFrom(const DbRep_User_Auth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DbRep_User_Auth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbRep_User_Auth::IsInitialized() const {
  return true;
}

void DbRep_User_Auth::Swap(DbRep_User_Auth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DbRep_User_Auth::InternalSwap(DbRep_User_Auth* other) {
  using std::swap;
  swap(isuserverified_, other->isuserverified_);
  swap(errcode_, other->errcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DbRep_User_Auth::GetMetadata() const {
  protobuf_Msg_5fTo_5fAnd_5fFrom_5fDB_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Msg_5fTo_5fAnd_5fFrom_5fDB_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
